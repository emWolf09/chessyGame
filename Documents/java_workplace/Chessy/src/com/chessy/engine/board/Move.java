package com.chessy.engine.board;


import com.chessy.engine.board.Board.Builder;
import com.chessy.engine.pieces.Piece;

public abstract class Move {
	
	final Board board;
	final Piece movedPiece;
	final int destinationCordinate;
	final static Move NULL_MOVE = new NullMove();
	protected Move(Board board, Piece movedPiece, int destinationCordinate) {
		super();
		this.board = board;
		this.movedPiece = movedPiece;
		this.destinationCordinate = destinationCordinate;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + destinationCordinate;
		result = prime * result + ((movedPiece == null) ? 0 : movedPiece.hashCode());
		return result;
	}

	//TODO autogenerated
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Move other = (Move) obj;
		if (destinationCordinate != other.destinationCordinate)
			return false;
		if (movedPiece == null) {
			if (other.movedPiece != null)
				return false;
		} else if (!movedPiece.equals(other.movedPiece))
			return false;
		return true;
	}


	public Piece getMovedPiece() {
		return this.movedPiece;
	}
	
	public int getDestinationCordinate() {
		return this.destinationCordinate;
	}
	
	public boolean isAttack() {
		return false;
	}
	
	public Piece getAttackPiece() {
		return null;
	}
	
	public boolean isCastlingMove() {
		return false;
	}
	public Board execute() {
		/*
		 *Create a new virtual board where all the pieces will be same except moved piece for non attacking move 
		 **/
		final Builder builder = new Builder();
		for(final Piece piece:this.board.getCurrentPlayer().getActivePieces()) {
			if(!piece.equals(this.movedPiece)) {
				builder.setPiece(piece);
			}
		}
		for(final Piece piece : this.board.getCurrentPlayer().getOpponent().getActivePieces()) {
			builder.setPiece(piece);
		}
		builder.setPiece(this.movedPiece.movePiece(this));
		builder.setNextMoveMaker(this.board.getCurrentPlayer().getOpponent().getAlliance());
		return builder.build();
	}	
	
	
	public static class MajorMove extends Move{
		public MajorMove(Board board, Piece movedPiece, int destinationCordinate) {
			super(board, movedPiece, destinationCordinate);
		}
	}
	
	/*
	 * Attack Move
	 
	
	public static class AttackMove extends Move{
		final Piece attackedPiece;
		public AttackMove(Board board, Piece movedPiece, int destinationCordinate,Piece attackedPiece) {
			super(board, movedPiece, destinationCordinate);
			this.attackedPiece = attackedPiece;
		}
		
		
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = super.hashCode();
			result = prime * result + ((attackedPiece == null) ? 0 : attackedPiece.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (!super.equals(obj))
				return false;
			if (getClass() != obj.getClass())
				return false;
			AttackMove other = (AttackMove) obj;
			if (attackedPiece == null) {
				if (other.attackedPiece != null)
					return false;
			} else if (!attackedPiece.equals(other.attackedPiece))
				return false;
			return true;
		}

		@Override
		public Board execute() {
			// TODO Auto-generated method stub
			return null;
		}	
		
		@Override
		public boolean isAttack() {
			return true;
		}
		
		 @Override
		 public Piece getAttackPiece() {
				return attackedPiece;
		 }
	}
	*/
	
	public static class PawnMove extends Move{
		public PawnMove(final Board board,final Piece movedPiece,final int destinationCordinate) {
			super(board, movedPiece, destinationCordinate);
		}
	}

	/*
	 * Pawn attack move
	
	public static class PawnAttackMove extends AttackMove{
		final Piece attackedPiece;
		public PawnAttackMove(Board board, Piece movedPiece, int destinationCordinate,Piece attackedPiece) {
			super(board, movedPiece, destinationCordinate,attackedPiece);
			this.attackedPiece = attackedPiece;
		}
		@Override
		public Board execute() {
			// TODO Auto-generated method stub
			return null;
		}	
		
	}
	
	
	public static class PawnEnPassantAttackMove extends PawnAttackMove{
		final Piece attackedPiece;
		public PawnEnPassantAttackMove(Board board, Piece movedPiece, int destinationCordinate,Piece attackedPiece) {
			super(board, movedPiece, destinationCordinate,attackedPiece);
			this.attackedPiece = attackedPiece;
		}
		@Override
		public Board execute() {
			// TODO Auto-generated method stub
			return null;
		}	
	}
	*/
	
	/*
	 * Pawn JumpMove 
	
	
	public static class PawnJumpMove extends Move{
		public PawnJumpMove(final Board board,final Piece movedPiece,final int destinationCordinate) {
			super(board, movedPiece, destinationCordinate);
		}
		
		
		@Override
		public Board execute() {
			final Builder builder = new Builder();
			Collection<Piece> pieces = this.board.getCurrentPlayer().getActivePieces();
			for(Piece piece : pieces) {
				if(piece!=this.movedPiece) {
					builder.setPiece(piece);
				}
			}
			
			pieces = this.board.getCurrentPlayer().getOpponent().getActivePieces();
			for(Piece piece : pieces) {
				builder.setPiece(piece);
			}
			final Pawn movedPawn = (Pawn)this.movedPiece.movePiece(this);
			builder.setPiece(movedPawn);
			builder.setEnpassantPawn(movedPawn);
			builder.setNextMoveMaker(this.board.getCurrentPlayer().getOpponent().getAlliance());
			return builder.build();
		}
	}
	
	*/
	
	/*
	 * castle move abstract class

	static abstract class CastleMove extends Move{
		public CastleMove(Board board, Piece movedPiece, int destinationCordinate) {
			super(board, movedPiece, destinationCordinate);
		}
	}
	
	
	public static class KingSideCastleMove extends CastleMove{
		protected final Rook castleRook;
		protected final int castleRookStart;
		protected final int castleRookDestination;
		
		
		public KingSideCastleMove(final Board board,final Piece movedPiece,final int destinationCordinate,final Rook castleRook,
									final int castleRookDestination,final int castleRookStart) {
			
			super(board, movedPiece, destinationCordinate);
			this.castleRook = castleRook;
			this.castleRookDestination  = castleRookDestination;
			this.castleRookStart = castleRookStart;
		}


		public Rook getCastleRook() {
			return castleRook;
		}

		@Override
		public boolean isCastlingMove() {return true;}
		
		
	}
	
	public static class QueenSideCastleMove extends CastleMove{
		
		protected final Rook castleRook;
		protected final int castleRookStart;
		protected final int castleRookDestination;
		
		
		public QueenSideCastleMove(final Board board,final Piece movedPiece,final int destinationCordinate,final Rook castleRook,
				final int castleRookDestination,final int castleRookStart) {
			super(board, movedPiece, destinationCordinate);
			this.castleRook = castleRook;
			this.castleRookDestination  = castleRookDestination;
			this.castleRookStart = castleRookStart;
		}
		
		public Rook getCastleRook() {
			return castleRook;
		}

		@Override
		public boolean isCastlingMove() {return true;}
	}
	*/

	
	
	public static class NullMove extends Move{
		public NullMove() {
			super(null,null,-1);
		}
		
		@Override
		public Board execute() {
			throw new RuntimeException("NULLMOVE_CLASS_EXECUTE_METHOD::Move execution method for Null move called::");
		}
	}
	
	
	//factory class for creating move subclass
	public static class MoveFactory{
		
		private MoveFactory() {
			System.err.println("Can not instantiate Move Factory class");
		}
		
		public static Move createMove(final Board board,final int currentCordinate,final int destinationCordinate) {
			/*
			 * Alternate solution would be to iterate through whitePlayer all legal move followed by blackPLayer and check then return move
			 * Two loops
			 */
			for(Move move : board.getAllLegalMoves()) {
				if(move.getMovedPiece().getPiecePostion()==currentCordinate && move.destinationCordinate==destinationCordinate)return move;
			}
				
			return NULL_MOVE;	
		}
		
	}
}
